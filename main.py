import os
import random
import subprocess
import logging
import time
import requests
import hashlib
from datetime import datetime, timedelta
from googleapiclient.discovery import build
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from flask import Flask
from waitress import serve
from urllib.parse import urlparse, parse_qs
import threading

app = Flask(__name__)

# Configuraci√≥n logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

# Configuraci√≥n
MEDIOS_URL = "https://raw.githubusercontent.com/n14-py/relaxstationmedios/master/mediosmusic.json"
YOUTUBE_CREDS = {
    'client_id': os.getenv("YOUTUBE_CLIENT_ID"),
    'client_secret': os.getenv("YOUTUBE_CLIENT_SECRET"),
    'refresh_token': os.getenv("YOUTUBE_REFRESH_TOKEN")
}

PALABRAS_CLAVE = {
    'imagen': {
        'naturaleza': ['bosque', 'lluvia', 'monta√±a', 'r√≠o', 'jungla'],
        'urbano': ['ciudad', 'loft', '√°tico', 'moderno', 'urbano'],
        'abstracto': ['arte', 'geometr√≠a', 'color', 'dise√±o', 'creativo'],
        'vintage': ['retro', 'nostalgia', 'anal√≥gico', 'vintage']
    },
    'musica': {
        'lofi': ['lofi', 'chill', 'study', 'relax'],
        'jazz': ['jazz', 'blues', 'saxo', 'instrumental'],
        'naturaleza': ['lluvia', 'bosque', 'viento', 'oceano'],
        'cl√°sica': ['piano', 'cl√°sica', 'viol√≠n', 'orquesta']
 }   }

PLANTILLAS_TITULOS = [
    "üìö {musica} | M√∫sica suave para {imagen}",
    "üåßÔ∏è {musica} + {imagen} ‚Äì Relajate, estudia o so√±√°",
    "‚ú® {musica} ‚Äì Para tu mente, alma y creatividad",
    "‚òï Noche {imagen} con {musica} | Transmisi√≥n 24/7",
    "üìº Retro {musica} | Desde RelaxStation",
    "üßò M√∫sica {musica} para {imagen}",
    "üìÄ {musica} para enfocar, relajar o disfrutar",
    "üåå {musica} para so√±ar despierto ‚Äì {imagen}",
    "üî• {musica} para noches {imagen}"
]

class GestorContenido:
    def __init__(self):
        self.media_cache_dir = os.path.abspath("./media_cache")
        os.makedirs(self.media_cache_dir, exist_ok=True)
        self.medios = self.cargar_medios()
    
    def descargar_archivo(self, url, es_imagen=False):
        try:
            if "drive.google.com" in url:
                file_id = parse_qs(urlparse(url).query).get('id', [None])[0]
                if file_id:
                    url = f"https://drive.google.com/uc?export=download&id={file_id}&confirm=t"
            
            nombre_hash = hashlib.md5(url.encode()).hexdigest()
            extension = os.path.splitext(urlparse(url).path)[1].lower() if es_imagen else '.mp3'
            ruta_local = os.path.join(self.media_cache_dir, f"{nombre_hash}{extension}")
            
            if os.path.exists(ruta_local):
                return ruta_local

            logging.info(f"‚¨áÔ∏è Descargando {'imagen' if es_imagen else 'm√∫sica'}: {url}")
            
            session = requests.Session()
            response = session.get(url, stream=True, timeout=30)
            response.raise_for_status()

            with open(ruta_local, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)

            return ruta_local
        except Exception as e:
            logging.error(f"Error descargando archivo: {str(e)}")
            return None

    def procesar_imagen(self, url):
        try:
            ruta_original = self.descargar_archivo(url, es_imagen=True)
            if not ruta_original:
                return None

            nombre_hash = hashlib.md5(url.encode()).hexdigest()
            ruta_procesada = os.path.join(self.media_cache_dir, f"{nombre_hash}.jpg")

            subprocess.run([
                "ffmpeg", "-y", "-i", ruta_original,
                "-vf", "scale=1280:720:force_original_aspect_ratio=decrease,pad=1280:720:-1:-1",
                "-q:v", "2", "-pix_fmt", "yuv420p", ruta_procesada
            ], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

            return ruta_procesada
        except Exception as e:
            logging.error(f"Error procesando imagen: {str(e)}")
            return None

    def cargar_medios(self):
        try:
            respuesta = requests.get(MEDIOS_URL, timeout=20)
            respuesta.raise_for_status()
            datos = respuesta.json()
            
            # Procesar im√°genes
            for img in datos['imagenes']:
                img['local_path'] = self.procesar_imagen(img['url'])
            
            # Procesar m√∫sica
            for musica in datos['musica']:
                musica['local_path'] = self.descargar_archivo(musica['url'])
            
            # Filtrar elementos inv√°lidos
            datos['imagenes'] = [i for i in datos['imagenes'] if i['local_path']]
            datos['musica'] = [m for m in datos['musica'] if m['local_path']]
            
            if not datos['imagenes'] or not datos['musica']:
                raise ValueError("No hay contenido v√°lido para transmitir")
            
            logging.info("‚úÖ Medios verificados y listos")
            return datos
        except Exception as e:
            logging.error(f"Error cargando medios: {str(e)}")
            return {"imagenes": [], "musica": []}

class YouTubeManager:
    def __init__(self):
        self.youtube = self.autenticar()
    
    def autenticar(self):
        creds = Credentials(
            token="",
            refresh_token=YOUTUBE_CREDS['refresh_token'],
            client_id=YOUTUBE_CREDS['client_id'],
            client_secret=YOUTUBE_CREDS['client_secret'],
            token_uri="https://oauth2.googleapis.com/token",
            scopes=['https://www.googleapis.com/auth/youtube']
        )
        creds.refresh(Request())
        return build('youtube', 'v3', credentials=creds)
    
    def crear_transmision(self, titulo, imagen_path):
        try:
            scheduled_start = datetime.utcnow() + timedelta(minutes=5)
            
            broadcast = self.youtube.liveBroadcasts().insert(
                part="snippet,status",
                body={
                    "snippet": {
                        "title": titulo,
                        "description": "Disfruta de nuestra selecci√≥n musical continua con ambientaci√≥n visual profesional.\n\nüîî Activa las notificaciones\nüëç D√©janos tu like\nüí¨ Comenta tus sugerencias",
                        "scheduledStartTime": scheduled_start.isoformat() + "Z"
                    },
                    "status": {
                        "privacyStatus": "public",
                        "selfDeclaredMadeForKids": False,
                        "enableAutoStart": True,
                        "enableAutoStop": True,
                        "enableArchive": True
                    }
                }
            ).execute()

            stream = self.youtube.liveStreams().insert(
                part="snippet,cdn",
                body={
                    "snippet": {"title": "Stream Continuo"},
                    "cdn": {
                        "format": "1080p",
                        "ingestionType": "rtmp",
                        "resolution": "1080p",
                        "frameRate": "30fps"
                    }
                }
            ).execute()

            self.youtube.liveBroadcasts().bind(
                part="id,contentDetails",
                id=broadcast['id'],
                streamId=stream['id']
            ).execute()

            # Subir miniatura
            self.youtube.thumbnails().set(
                videoId=broadcast['id'],
                media_body=imagen_path,
                media_mime_type='image/jpeg'
            ).execute()

            return {
                "rtmp": f"{stream['cdn']['ingestionInfo']['ingestionAddress']}/{stream['cdn']['ingestionInfo']['streamName']}",
                "scheduled_start": scheduled_start,
                "broadcast_id": broadcast['id'],
                "stream_id": stream['id']
            }
        except Exception as e:
            logging.error(f"Error creando transmisi√≥n: {str(e)}")
            return None
    
    def verificar_stream_activo(self, stream_id):
        try:
            response = self.youtube.liveStreams().list(
                part="status",
                id=stream_id
            ).execute()
            return response['items'][0]['status']['streamStatus'] == 'active'
        except:
            return False
    
    def control_estado(self, broadcast_id, estado):
        try:
            self.youtube.liveBroadcasts().transition(
                broadcastStatus=estado,
                id=broadcast_id,
                part="id,status"
            ).execute()
            return True
        except Exception as e:
            logging.error(f"Error cambiando a estado {estado}: {str(e)}")
            return False

def generar_titulo():
    # Listas de componentes para generar t√≠tulos
    EMOJIS = ['üìö', 'üåô', 'üéß', '‚ú®', '‚òï', 'üåø', 'üåÄ', 'üïØÔ∏è', 'üåå', 'üéπ', 'üõãÔ∏è', 'üìñ', 'üåßÔ∏è', 'üçµ']
    DESCRIPTORES = [
        "instrumental", "beats relajantes", "mix premium", "ritmos suaves",
        "melod√≠as nocturnas", "sonidos c√°lidos", "vibraciones armoniosas",
        "compilaci√≥n especial", "selecci√≥n exclusiva", "flow continuo"
    ]
    ACTIVIDADES = [
        "estudi√°", "relajate", "concentrate", "medit√°", "trabaj√°",
        "cre√°", "dorm√≠", "so√±√°", "desconect√°", "flu√≠"
    ]
    MODIFICADORES = [
        "con estas melod√≠as suaves", "con beats para el alma",
        "en tu refugio sonoro", "con nuestra mezcla √∫nica",
        "en tu zona de paz", "con energ√≠a renovadora"
    ]
    HORARIOS = ["24/7", "sin interrupciones", "non-stop", "en loop infinito"]

    # Seleccionar componentes aleatorios
    componente = {
        'emoji': random.choice(EMOJIS),
        'descriptor': random.choice(DESCRIPTORES),
        'actividad': random.choice(ACTIVIDADES),
        'modificador': random.choice(MODIFICADORES),
        'horario': random.choice(HORARIOS)
    }

    # Plantillas de t√≠tulos
    plantillas = [
        "{emoji} Lofi {descriptor} {horario} ‚Äì {actividad.capitalize()} {modificador}",
        "{emoji} Lofi para {actividad} ‚Äì {descriptor} {horario}",
        "{emoji} {descriptor.capitalize()} ‚Äì {actividad.capitalize()} {modificador}",
        "{emoji} Lofi {horario} ‚Äì {descriptor} para {actividad}",
        "{emoji} {actividad.capitalize()} con Lofi ‚Äì {descriptor} {modificador}"
    ]

    # Generar y retornar t√≠tulo
    return random.choice(plantillas).format(**componente)

def manejar_transmision(stream_data, youtube):
    proceso = None
    try:
        # Esperar inicio programado
        tiempo_espera = (stream_data['scheduled_start'] - datetime.utcnow()).total_seconds()
        if tiempo_espera > 0:
            logging.info(f"‚è≥ Esperando {tiempo_espera:.0f}s para preparar transmisi√≥n...")
            time.sleep(tiempo_espera)
        
        # Configurar FIFO
        fifo_path = os.path.join(stream_data['gestor'].media_cache_dir, "audio_fifo")
        if os.path.exists(fifo_path):
            os.remove(fifo_path)
        os.mkfifo(fifo_path)

        # Comando FFmpeg optimizado
        cmd = [
            "ffmpeg",
            "-loglevel", "error",
            "-re",
            "-loop", "1",
            "-i", stream_data['imagen']['local_path'],
            "-f", "mp3",
            "-i", fifo_path,
            "-vf", "format=yuv420p,scale=1280:720",
            "-c:v", "libx264",
            "-preset", "ultrafast",
            "-tune", "stillimage",
            "-b:v", "3000k",
            "-maxrate", "3000k",
            "-bufsize", "6000k",
            "-g", "60",
            "-c:a", "aac",
            "-b:a", "192k",
            "-f", "flv",
            stream_data['rtmp']
        ]

        proceso = subprocess.Popen(cmd)
        logging.info("üü¢ FFmpeg iniciado - Estableciendo conexi√≥n RTMP...")

        # Esperar hasta que el stream est√© activo
        stream_activo = False
        for _ in range(10):
            estado = youtube.verificar_stream_activo(stream_data['stream_id'])
            if estado == 'active':
                stream_activo = True
                break
            time.sleep(5)
        
        if not stream_activo:
            raise Exception("‚ùå Stream no se activ√≥ a tiempo")

        # Transici√≥n a testing
        if youtube.control_estado(stream_data['broadcast_id'], 'testing'):
            logging.info("üé¨ Transmisi√≥n en VISTA PREVIA")
        
        # Esperar hasta el inicio programado
        tiempo_restante = (stream_data['scheduled_start'] - datetime.utcnow()).total_seconds()
        if tiempo_restante > 0:
            logging.info(f"‚è≥ Esperando {tiempo_restante:.0f}s para LIVE...")
            time.sleep(tiempo_restante)
        
        # Transici√≥n a live
        if youtube.control_estado(stream_data['broadcast_id'], 'live'):
            logging.info("üé• Transmisi√≥n LIVE iniciada")

        # Mantener transmisi√≥n por 8 horas
        tiempo_inicio = datetime.utcnow()
        while (datetime.utcnow() - tiempo_inicio) < timedelta(hours=8):
            if proceso.poll() is not None:
                logging.warning("‚ö° Reconectando FFmpeg...")
                proceso.kill()
                proceso = subprocess.Popen(cmd)
            
            # Reproducir m√∫sica
            musica = random.choice(stream_data['gestor'].medios['musica'])
            logging.info(f"üéµ Reproduciendo: {musica['name']}")
            
            try:
                with open(musica['local_path'], 'rb') as audio_file:
                    with open(fifo_path, 'wb') as fifo:
                        fifo.write(audio_file.read())
                time.sleep(get_duration(musica['local_path']))
            except Exception as e:
                logging.error(f"Error enviando audio: {str(e)}")
                time.sleep(5)

    except Exception as e:
        logging.error(f"ERROR: {str(e)}")
    finally:
        if proceso:
            proceso.kill()
        try:
            youtube.control_estado(stream_data['broadcast_id'], 'complete')
            logging.info("üõë Transmisi√≥n finalizada y archivada correctamente")
        except Exception as e:
            logging.error(f"Error al finalizar: {str(e)}")

def get_duration(file_path):
    try:
        result = subprocess.run([
            'ffprobe', '-v', 'error',
            '-show_entries', 'format=duration',
            '-of', 'default=noprint_wrappers=1:nokey=1',
            file_path
        ], capture_output=True, text=True)
        return float(result.stdout.strip())
    except:
        return 300  # Duraci√≥n por defecto 3 minutos

def ciclo_transmision():
    gestor = GestorContenido()
    youtube = YouTubeManager()
    
    while True:
        try:
            if not gestor.medios['imagenes'] or not gestor.medios['musica']:
                logging.error("No hay medios v√°lidos, reintentando...")
                time.sleep(60)
                gestor = GestorContenido()
                continue
            
            imagen = random.choice(gestor.medios['imagenes'])
            musica = random.choice(gestor.medios['musica'])
            
            titulo = generar_titulo()
            logging.info(f"üìù T√≠tulo generado: {titulo}")
            
            stream_info = youtube.crear_transmision(titulo, imagen['local_path'])
            if not stream_info:
                raise Exception("Error al crear transmisi√≥n")
            
            stream_data = {
                **stream_info,
                "imagen": imagen,
                "gestor": gestor
            }

            hilo = threading.Thread(
                target=manejar_transmision,
                args=(stream_data, youtube),
                daemon=True
            )
            hilo.start()
            
            # Esperar 8 horas y 5 minutos para nueva transmisi√≥n
            time.sleep(28800 + 300)

        except Exception as e:
            logging.error(f"ERROR GRAVE: {str(e)}")
            time.sleep(60)

@app.route('/health')
def health_check():
    return "OK", 200

if __name__ == "__main__":
    logging.info("üéß Iniciando transmisor de m√∫sica continua...")
    threading.Thread(target=ciclo_transmision, daemon=True).start()
    serve(app, host='0.0.0.0', port=10000)
