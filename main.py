import os
import random
import subprocess
import logging
import time
import requests
import hashlib
from datetime import datetime, timedelta
from googleapiclient.discovery import build
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from flask import Flask
from waitress import serve
from urllib.parse import urlparse
import threading

app = Flask(__name__)

# Configuraci√≥n logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

# Configuraci√≥n
MEDIOS_URL = "https://raw.githubusercontent.com/n14-py/RelaxStationmedios/master/medios.json"
YOUTUBE_CREDS = {
    'client_id': os.getenv("YOUTUBE_CLIENT_ID"),
    'client_secret': os.getenv("YOUTUBE_CLIENT_SECRET"),
    'refresh_token': os.getenv("YOUTUBE_REFRESH_TOKEN")
}

PALABRAS_CLAVE = {
    'lofi': ['lofi', 'relax', 'chill'],
    'musica': ['m√∫sica', 'music', 'instrumental'],
    'estudio': ['estudio', 'focus', 'concentraci√≥n'],
    'noche': ['noche', 'night', 'calma']
}

class GestorContenido:
    def __init__(self):
        self.media_cache_dir = os.path.abspath("./media_cache")
        os.makedirs(self.media_cache_dir, exist_ok=True)
        self.medios = self.cargar_medios()
        self.playlist_path = os.path.join(self.media_cache_dir, "playlist.txt")

    def generar_playlist(self):
        canciones = [m for m in self.medios['musica'] if m['local_path']]
        random.shuffle(canciones)
        
        with open(self.playlist_path, "w") as f:
            for cancion in canciones:
                f.write(f"file '{cancion['local_path']}'\n")
        return self.playlist_path

    def descargar_imagen(self, url):
        try:
            nombre_hash = hashlib.md5(url.encode()).hexdigest()
            ruta_local = os.path.join(self.media_cache_dir, f"{nombre_hash}.jpg")
            
            if os.path.exists(ruta_local):
                return ruta_local

            logging.info(f"‚¨áÔ∏è Descargando imagen: {url}")
            with requests.get(url, stream=True, timeout=30) as r:
                r.raise_for_status()
                with open(ruta_local, 'wb') as f:
                    for chunk in r.iter_content(chunk_size=8192):
                        f.write(chunk)
            
            return ruta_local
        except Exception as e:
            logging.error(f"Error descargando imagen: {str(e)}")
            return None

    def descargar_audio(self, url):
        try:
            if "drive.google.com" in url:
                file_id = url.split('id=')[-1].split('&')[0]
                url = f"https://drive.google.com/uc?export=download&id={file_id}&confirm=t"
            
            nombre_hash = hashlib.md5(url.encode()).hexdigest()
            ruta_local = os.path.join(self.media_cache_dir, f"{nombre_hash}.mp3")
            
            if os.path.exists(ruta_local):
                return ruta_local

            logging.info(f"‚¨áÔ∏è Descargando canci√≥n: {url}")
            with requests.get(url, stream=True, timeout=30) as r:
                r.raise_for_status()
                with open(ruta_local, 'wb') as f:
                    for chunk in r.iter_content(chunk_size=8192):
                        f.write(chunk)
            
            return ruta_local
        except Exception as e:
            logging.error(f"Error procesando audio: {str(e)}")
            return None

    def cargar_medios(self):
        try:
            respuesta = requests.get(MEDIOS_URL, timeout=20)
            respuesta.raise_for_status()
            datos = respuesta.json()
            
            # Descargar m√∫sica
            for cancion in datos['musica']:
                cancion['local_path'] = self.descargar_audio(cancion['url'])
            
            # Descargar im√°genes
            datos['imagenes'] = [{"name": img['name'], "local_path": self.descargar_imagen(img['url'])} 
                                for img in datos.get('imagenes', [])]
            
            logging.info("‚úÖ Medios verificados y listos")
            return datos
        except Exception as e:
            logging.error(f"Error cargando medios: {str(e)}")
            return {"musica": [], "imagenes": []}

class YouTubeManager:
    def __init__(self):
        self.youtube = self.autenticar()
    
    def autenticar(self):
        try:
            creds = Credentials(
                token="",
                refresh_token=YOUTUBE_CREDS['refresh_token'],
                client_id=YOUTUBE_CREDS['client_id'],
                client_secret=YOUTUBE_CREDS['client_secret'],
                token_uri="https://oauth2.googleapis.com/token",
                scopes=['https://www.googleapis.com/auth/youtube']
            )
            creds.refresh(Request())
            return build('youtube', 'v3', credentials=creds)
        except Exception as e:
            logging.error(f"Error autenticaci√≥n YouTube: {str(e)}")
            return None
    
    def crear_transmision(self, titulo, imagen_path):
        try:
            scheduled_start = datetime.utcnow() + timedelta(minutes=5)
            
            broadcast = self.youtube.liveBroadcasts().insert(
                part="snippet,status",
                body={
                  "snippet": {
                  "title": titulo,
                  "description": "üéµ Relax Station Radio ‚Ä¢ M√∫sica Continua 24/7\n\nDisfruta de nuestra selecci√≥n musical las 24 horas del d√≠a\n\nüéß Nueva playlist cada 8 horas\n\nüîî S√≠guenos en redes:\nhttps://instagram.com/turadio\nhttps://facebook.com/turadio",
                  "scheduledStartTime": scheduled_start.isoformat() + "Z"
                  },
                  "status": {
                      "privacyStatus": "public",
                      "selfDeclaredMadeForKids": False,
                      "enableAutoStart": True,
                      "enableAutoStop": True,
                      "enableArchive": True
                  }
                }
            ).execute()
            
            stream = self.youtube.liveStreams().insert(
                part="snippet,cdn",
                body={
                    "snippet": {
                        "title": "Stream de Radio"
                    },
                    "cdn": {
                        "ingestionType": "rtmp",
                        "resolution": "1080p",
                        "frameRate": "30fps"
                    }
                }
            ).execute()
            
            self.youtube.liveBroadcasts().bind(
                part="id,contentDetails",
                id=broadcast['id'],
                streamId=stream['id']
            ).execute()
            
            # Subir miniatura
            if imagen_path and os.path.exists(imagen_path):
                self.youtube.thumbnails().set(
                    videoId=broadcast['id'],
                    media_body=imagen_path
                ).execute()
            
            rtmp_url = stream['cdn']['ingestionInfo']['ingestionAddress']
            stream_name = stream['cdn']['ingestionInfo']['streamName']
            
            return {
                "rtmp": f"{rtmp_url}/{stream_name}",
                "scheduled_start": scheduled_start,
                "broadcast_id": broadcast['id'],
                "stream_id": stream['id']
            }
        except Exception as e:
            logging.error(f"Error creando transmisi√≥n: {str(e)}")
            return None
    
    def transicionar_estado(self, broadcast_id, estado):
        try:
            self.youtube.liveBroadcasts().transition(
                broadcastStatus=estado,
                id=broadcast_id,
                part="id,status"
            ).execute()
            return True
        except Exception as e:
            logging.error(f"Error transicionando a {estado}: {str(e)}")
            return False

    def finalizar_transmision(self, broadcast_id):
        try:
            self.youtube.liveBroadcasts().transition(
                broadcastStatus="complete",
                id=broadcast_id,
                part="id,status"
            ).execute()
            return True
        except Exception as e:
            logging.error(f"Error finalizando transmisi√≥n: {str(e)}")
            return False

def generar_titulo():
    temas = ['Lofi', 'Chill', 'Relax', 'Estudio', 'Noche']
    estados = ['para Concentrarse', 'para Relajarse', 'Anti Estr√©s', 'para Dormir']
    
    plantillas = [
        f"üéß M√∫sica {random.choice(temas)} ‚Ä¢ {random.choice(estados)} ‚Ä¢ 24/7",
        f"‚ô´ Radio Continua ‚Ä¢ {random.choice(['Mix Aleatorio', 'Selecci√≥n Premium', 'Variedad Musical'])}",
        f"üéµ {random.choice(temas)} Vibes ‚Ä¢ {random.choice(estados)} ‚Ä¢ Sin Interrupciones",
        f"‚ú® M√∫sica {random.choice(temas)} ‚Ä¢ Ambiente Perfecto ‚Ä¢ Live 24/7"
    ]
    
    return random.choice(plantillas)

def manejar_transmision(stream_data, youtube):
    try:
        gestor = GestorContenido()
        playlist = gestor.generar_playlist()
        imagen = random.choice([img for img in gestor.medios['imagenes'] if img['local_path']])
        
        cmd = [
            "ffmpeg",
            "-loglevel", "error",
            "-re",
            "-loop", "1",
            "-i", imagen['local_path'],
            "-f", "concat",
            "-safe", "0",
            "-i", playlist,
            "-vf", "scale=1280:720,setsar=1",
            "-c:v", "libx264",
            "-preset", "ultrafast",
            "-tune", "stillimage",
            "-b:v", "2500k",
            "-g", "60",
            "-c:a", "aac",
            "-b:a", "192k",
            "-ar", "44100",
            "-f", "flv",
            stream_data['rtmp']
        ]
        
        proceso = subprocess.Popen(cmd)
        logging.info(f"üü¢ Transmitiendo con imagen: {imagen['name']}")
        
        tiempo_inicio = datetime.utcnow()
        while (datetime.utcnow() - tiempo_inicio) < timedelta(hours=8):
            if proceso.poll() is not None:
                logging.warning("‚ö° Reconectando FFmpeg...")
                proceso.kill()
                playlist = gestor.generar_playlist()
                proceso = subprocess.Popen(cmd)
            time.sleep(15)
        
        proceso.kill()
        youtube.finalizar_transmision(stream_data['broadcast_id'])
        logging.info("üõë Transmisi√≥n finalizada")

    except Exception as e:
        logging.error(f"Error en transmisi√≥n: {str(e)}")
        youtube.finalizar_transmision(stream_data['broadcast_id'])

def ciclo_transmision():
    gestor = GestorContenido()
    youtube = YouTubeManager()
    
    while True:
        try:
            titulo = generar_titulo()
            imagen = random.choice([img for img in gestor.medios['imagenes'] if img['local_path']])
            
            stream_info = youtube.crear_transmision(titulo, imagen['local_path'])
            if not stream_info:
                raise Exception("Error al crear transmisi√≥n")
            
            threading.Thread(
                target=manejar_transmision,
                args=(stream_info, youtube),
                daemon=True
            ).start()
            
            time.sleep(8 * 3600)  # Esperar 8 horas
            
        except Exception as e:
            logging.error(f"Error: {str(e)}")
            time.sleep(60)

@app.route('/health')
def health_check():
    return "OK", 200

if __name__ == "__main__":
    logging.info("üìª Iniciando radio 24/7...")
    threading.Thread(target=ciclo_transmision, daemon=True).start()
    serve(app, host='0.0.0.0', port=10000)
